[gd_resource type="VisualShader" load_steps=15 format=2]

[ext_resource path="res://misc/wipe.png" type="Texture" id=1]
[ext_resource path="res://splash/logotype_1280.png" type="Texture" id=2]
[ext_resource path="res://splash/godot_1280.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=5]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.666667 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
output_port_for_preview = 0
uniform_name = "wipe_offset"
hint = 1
default_value_enabled = true

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=3]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=4]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 3, 1 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=10]

[sub_resource type="VisualShaderNodeVectorCompose" id=11]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_3;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_4;



void vertex() {
// Output:0

}

void fragment() {
// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// VectorOp:7
	vec3 n_in7p1 = vec3(1.00000, 3.00000, 1.00000);
	vec3 n_out7p0 = n_out6p0 / n_in7p1;

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out7p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// VectorMix:5
	vec3 n_out5p0 = mix(n_out3p0, n_out2p0, n_out4p0);

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -3100.14, 963.213 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 20 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 20, 120 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 20, -100 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 20, 340 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 320, 20 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -1060, 300 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -840, 280 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( -480.534, 476.177 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -860.695, 644.657 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( -1540, 680 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -1240, 720 )
nodes/fragment/12/node = SubResource( 7 )
nodes/fragment/12/position = Vector2( -1960, 700 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 2, 0, 5, 1, 4, 0, 5, 2, 5, 0, 0, 0, 6, 0, 7, 0, 7, 0, 4, 0, 7, 0, 8, 0, 9, 0, 8, 1, 10, 0, 11, 0, 11, 0, 9, 1, 12, 0, 10, 2 )
